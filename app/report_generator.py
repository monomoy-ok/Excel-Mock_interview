# app/report_generator.py

from reportlab.lib.pagesizes import LETTER
from reportlab.pdfgen import canvas
from reportlab.lib.utils import simpleSplit
from datetime import datetime
import os

def generate_pdf_report(candidate_name, questions, answers, feedbacks, summaries=None, encouragements=None, cn_summary=None, output_dir="data/reports") -> str:
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    filename = f"{candidate_name.replace(' ', '_')}_Excel_Interview_Report.pdf"
    filepath = os.path.join(output_dir, filename)

    c = canvas.Canvas(filepath, pagesize=LETTER)
    width, height = LETTER
    y = height - 50

    def draw_wrapped_text(text, x, y, max_width, line_height, font="Helvetica", font_size=12):
        lines = simpleSplit(text, font, font_size, max_width)
        for line in lines:
            c.drawString(x, y, line)
            y -= line_height
        return y

    # Header
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, y, "Excel Interview Performance Report")
    y -= 30

    c.setFont("Helvetica", 12)
    c.drawString(50, y, f"Candidate: {candidate_name}")
    y -= 20
    c.drawString(50, y, f"Date: {datetime.now().strftime('%d %B %Y')}")
    y -= 30

    # Q&A with feedback, summaries, encouragements
    for i, (q, a, f) in enumerate(zip(questions, answers, feedbacks), 1):
        c.setFont("Helvetica-Bold", 12)
        y = draw_wrapped_text(f"Q{i}: {q}", 50, y, width - 100, 16)

        c.setFont("Helvetica", 12)
        y = draw_wrapped_text(f"Answer: {a}", 60, y - 5, width - 110, 15)
        y = draw_wrapped_text(f"Feedback: {f}", 60, y - 5, width - 110, 15)
        if summaries and i-1 < len(summaries):
            y = draw_wrapped_text(f"Summary: {summaries[i-1]}", 60, y - 5, width - 110, 15)
        if encouragements and i-1 < len(encouragements):
            y = draw_wrapped_text(f"Encouragement: {encouragements[i-1]}", 60, y - 5, width - 110, 15)
        y -= 15
        if y < 100:
            c.showPage()
            y = height - 50

    # LLM-generated strengths/weaknesses section
    if summaries:
        from openai import OpenAI
        from app.config import MODEL_NAME, OPENAI_API_KEY
        client = OpenAI(api_key=OPENAI_API_KEY)
        try:
            prompt = f"""
You are an expert interviewer. Here are the candidate's answers and feedback summaries:
"""
            for i, (q, a, s, f) in enumerate(zip(questions, answers, summaries, feedbacks), 1):
                prompt += f"\nQ{i}: {q}\nA: {a}\nSummary: {s}\nFeedback: {f}"
            prompt += "\n\nList the candidate's main strengths and areas for improvement in 2-3 bullet points each."
            response = client.chat.completions.create(
                model=MODEL_NAME,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=200
            )
            sw_content = response.choices[0].message.content.strip()
        except Exception as e:
            sw_content = "Strengths: - Good effort\nAreas for improvement: - None"
        c.setFont("Helvetica-Bold", 13)
        y = draw_wrapped_text("Strengths & Areas for Improvement:", 50, y - 10, width - 100, 16)
        c.setFont("Helvetica", 12)
        y = draw_wrapped_text(sw_content, 60, y - 5, width - 110, 15)
        y -= 15
        if y < 100:
            c.showPage()
            y = height - 50

    # Add Coding Ninjas HR Summary if available
    if cn_summary:
        if y < 100:
            c.showPage()
            y = height - 50
        c.setFont("Helvetica-Bold", 13)
        y = draw_wrapped_text("Coding Ninjas HR Summary:", 50, y - 10, width - 100, 16)
        c.setFont("Helvetica", 12)
        y = draw_wrapped_text(cn_summary, 60, y - 5, width - 110, 15)
        y -= 15

    # Timeline (simple)
    c.setFont("Helvetica-Bold", 12)
    y = draw_wrapped_text("Timeline:", 50, y - 10, width - 100, 16)
    c.setFont("Helvetica", 11)
    for i, q in enumerate(questions, 1):
        y = draw_wrapped_text(f"Q{i} asked", 60, y - 5, width - 110, 13)
        if y < 100:
            c.showPage()
            y = height - 50

    # Footer
    c.setFont("Helvetica-Oblique", 11)
    c.drawString(50, y, "Generated by AI Excel Interviewer")

    c.save()
    return filepath

# Scaffold for HTML/plain text export
def generate_html_report(*args, **kwargs):
    return "<html><body><h1>Report export coming soon!</h1></body></html>"

def generate_text_report(*args, **kwargs):
    return "Report export coming soon!"
